// Code generated by protoc-gen-go.
// source: pipelines.proto
// DO NOT EDIT!

/*
Package pipelines is a generated protocol buffer package.

It is generated from these files:
	pipelines.proto

It has these top-level messages:
	Emit
	Work
	Record
	Timer
	StartWorker
*/
package pipelines

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Emit struct {
	Record *Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
	Stream string  `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
}

func (m *Emit) Reset()                    { *m = Emit{} }
func (m *Emit) String() string            { return proto.CompactTextString(m) }
func (*Emit) ProtoMessage()               {}
func (*Emit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Emit) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Work struct {
	Record  *Record `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
	Service string  `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Key     string  `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *Work) Reset()                    { *m = Work{} }
func (m *Work) String() string            { return proto.CompactTextString(m) }
func (*Work) ProtoMessage()               {}
func (*Work) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Work) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type Record struct {
	CorrelationID uint64 `protobuf:"varint,1,opt,name=correlationID" json:"correlationID,omitempty"`
	Guid          uint64 `protobuf:"varint,2,opt,name=guid" json:"guid,omitempty"`
	Data          string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Test          bool   `protobuf:"varint,4,opt,name=test" json:"test,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Timer struct {
	CorrelationID uint64 `protobuf:"varint,1,opt,name=correlationID" json:"correlationID,omitempty"`
	Guid          uint64 `protobuf:"varint,2,opt,name=guid" json:"guid,omitempty"`
	Stamp         uint64 `protobuf:"varint,3,opt,name=stamp" json:"stamp,omitempty"`
}

func (m *Timer) Reset()                    { *m = Timer{} }
func (m *Timer) String() string            { return proto.CompactTextString(m) }
func (*Timer) ProtoMessage()               {}
func (*Timer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StartWorker struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Command string `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	Guid    string `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
}

func (m *StartWorker) Reset()                    { *m = StartWorker{} }
func (m *StartWorker) String() string            { return proto.CompactTextString(m) }
func (*StartWorker) ProtoMessage()               {}
func (*StartWorker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Emit)(nil), "pipelines.Emit")
	proto.RegisterType((*Work)(nil), "pipelines.Work")
	proto.RegisterType((*Record)(nil), "pipelines.Record")
	proto.RegisterType((*Timer)(nil), "pipelines.Timer")
	proto.RegisterType((*StartWorker)(nil), "pipelines.StartWorker")
}

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0xea, 0x06, 0x72, 0xa1, 0x54, 0x58, 0x42, 0xca, 0x08, 0x9e, 0x98, 0x3a, 0xc0,
	0x84, 0x58, 0x41, 0xa8, 0x8c, 0x80, 0xc4, 0x6c, 0xe2, 0x13, 0xb2, 0x5a, 0xc7, 0xd6, 0xf9, 0x40,
	0xe2, 0xdf, 0xe3, 0x5c, 0x10, 0xed, 0xd8, 0x29, 0x7a, 0xb9, 0xfb, 0x3e, 0xbd, 0x33, 0x2c, 0x93,
	0x4f, 0xb8, 0xf5, 0x03, 0xe6, 0x55, 0xa2, 0xc8, 0x51, 0x37, 0xff, 0x3f, 0xcc, 0x1d, 0xa8, 0xc7,
	0xe0, 0x59, 0x5f, 0x41, 0x4d, 0xd8, 0x47, 0x72, 0x5d, 0x75, 0x59, 0x5d, 0xb7, 0x37, 0xe7, 0xab,
	0x1d, 0xf4, 0x22, 0x03, 0x7d, 0x06, 0x75, 0x66, 0x42, 0x1b, 0xba, 0xa3, 0xb2, 0xd2, 0x98, 0x27,
	0x50, 0xef, 0x91, 0x36, 0x87, 0xa0, 0x4b, 0x38, 0xce, 0x48, 0xdf, 0xbe, 0xc7, 0x89, 0xd5, 0x2d,
	0xcc, 0x36, 0xf8, 0xd3, 0xcd, 0x44, 0xb4, 0x86, 0xfa, 0x6f, 0xef, 0x02, 0x16, 0xe5, 0x4b, 0xb8,
	0xb5, 0xec, 0xe3, 0xb0, 0x7e, 0x10, 0xa3, 0xd2, 0xa7, 0xa0, 0x3e, 0xbf, 0xbc, 0x13, 0x56, 0x92,
	0xb3, 0x6c, 0x27, 0x78, 0x4c, 0x8c, 0x99, 0x3b, 0x55, 0xd2, 0x89, 0xb9, 0x87, 0xf9, 0x9b, 0x0f,
	0x48, 0x87, 0x99, 0x16, 0x30, 0xcf, 0x6c, 0x43, 0x12, 0x95, 0x32, 0xcf, 0xd0, 0xbe, 0xb2, 0x25,
	0x1e, 0xaf, 0x2a, 0x8a, 0xbd, 0xd2, 0xd5, 0x7e, 0xe9, 0xe9, 0x82, 0x32, 0xed, 0x63, 0x08, 0x76,
	0x70, 0xbb, 0x22, 0xa2, 0x1e, 0x8b, 0x34, 0x1f, 0xb5, 0xbc, 0xf4, 0xed, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x20, 0x1b, 0x64, 0xaa, 0x7c, 0x01, 0x00, 0x00,
}
